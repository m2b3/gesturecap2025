import time
import cv2
import numpy as np
import math
import logging
from hand_pose_detector import HandPoseDetector
from pythonosc import udp_client
import PySpin
from video_input import VideoInput
from flircam import Flircam

# Initialize logger
logger = logging.getLogger(__name__)


# Initialize hand pose detector and FLIR camera
detector = HandPoseDetector()
cam = Flircam()
cam.start()

# Configuration
filename_prefix = "fixedfps_recording"
frame_size = (720, 540)
fixed_fps = 300.0  # <- Set your desired FPS here
interval = 1.0 / fixed_fps

# Init camera
# cap = cv2.VideoCapture(0)
# assert cap.isOpened(), "Failed to open camera."

# # Get actual resolution
# frame_width = int(cam.get(cv2.CAP_PROP_FRAME_WIDTH))
# frame_height = int(cam.get(cv2.CAP_PROP_FRAME_HEIGHT))
# frame_size = (frame_width, frame_height)

# Codec
fourcc = cv2.VideoWriter_fourcc(*'MJPG')
recording = False
recording_index = 1

print(f"Press 'r' to start/stop recording at {fixed_fps} FPS. Press 'q' to quit.")

out = None
start_time = None
frame_count = 0

while True:
    # ret, frame = cap.read()
    frame, ts = cam.read_frame()
    # if not ret:
    #     print("Failed to grab frame.")
    #     break

    cv2.imshow("Live Feed", frame)

    key = cv2.waitKey(1) & 0xFF

    if key == ord('r'):
        if not recording:
            filename = f"{filename_prefix}_{recording_index}.avi"
            out = cv2.VideoWriter(filename, fourcc, fixed_fps, frame_size)
            print(f"Recording started: {filename}")
            recording = True
            frame_count = 0
            start_time = time.time()
        else:
            elapsed = time.time() - start_time
            out.release()
            print(f"Recording stopped. Saved {frame_count} frames in {elapsed:.2f}s ({frame_count / elapsed:.2f} FPS)")
            recording = False
            recording_index += 1

    elif key == ord('q'):
        print("Quitting.")
        if recording:
            out.release()
        break

    if recording:
        out.write(frame)
        frame_count += 1
        # time.sleep(interval)

# Cleanup
# cap.release()
cam.cleanup()
cv2.destroyAllWindows()
